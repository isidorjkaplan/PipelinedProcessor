#include <stdio.h>

#include <stdlib.h>

#include <math.h>

#include <float.h>

#include "altera_avalon_performance_counter.h"

#include <sys/alt_irq.h>



static alt_irq_context context; /* Use when disabling interrupts. */



static void pre_measurement(void){

  PERF_RESET (PERFORMANCE_COUNTER_0_BASE);

  context = alt_irq_disable_all();

  PERF_START_MEASURING (PERFORMANCE_COUNTER_0_BASE);

}



static void post_measurement(void){

	alt_irq_enable_all(context);

	PERF_STOP_MEASURING (PERFORMANCE_COUNTER_0_BASE);

}



static inline int get_runtime(int sec) {

	return (int)perf_get_section_time ((void*)PERFORMANCE_COUNTER_0_BASE, sec);

}



// Un-comment these options to disable the use of the floating-point hardware

// for the respective operation.

/*

#pragma GCC target("no-custom-fadds")

#pragma GCC target("no-custom-fsubs")

#pragma GCC target("no-custom-fmuls")

#pragma GCC target("no-custom-fdivs")//*/

typedef int fixed;



int Q_M = 0;

int Q_N = 0;

int F_ONE = 0;



void SET_Q_FORMAT(int M, int N) {

    Q_M = M;

    Q_N = N;

    F_ONE = 1 << N;

}



static inline fixed FLOAT_TO_FIXED(float f) {

    return (fixed)(f * F_ONE);

}



static inline float FIXED_TO_FLOAT(fixed f){

    return (float)(f)/F_ONE;

}



static inline fixed FIXED_MULT(fixed op1, fixed op2) {

    return (fixed)op1*op2 >> Q_N;

}



float float_abs(float x) {

    if (x >= 0) return x;

    else return -x;

}



int num_float;

int num_fixed;

float float_sin(float x, int terms) {

    num_float++;

    PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 2);

    float result = x;

    float x2 = x*x;

    float num = x;

    int den = 1;

    int neg = 1;

    for (int i = 1; i < terms; i++) {

        num *= x2;

        den *= (2*i+1)*(2*i);

        if (!neg)

            result += num/den;

        else

            result -= num/den;

        neg = !neg;

    }

    PERF_END (PERFORMANCE_COUNTER_0_BASE, 2);

    return result;

}



float optimized_float_sin(register float x) {

    num_float++;

    PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 2);

    register float result = x;

    register float x2 = x*x;



    register float powx = x2*x; //x^3

    result -= powx * (0.166666f);//1/3!



    powx *= x2; //x^5

    result += powx * (0.0083333f);//1/5!



    powx *= x2; //x^7

    result -= powx * (0.0001984126f); //1/7!



    powx *= x2; //x^9

    result += powx * (0.000002755731f);//1/9!

    PERF_END (PERFORMANCE_COUNTER_0_BASE, 2);

    return result;

}



fixed optimized_fixed_sin(register fixed x) {

    num_fixed++;

    register q_val = Q_N;

    PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 1);



    register fixed result = x;

    register fixed x2 = (x * x) >> q_val;



    register fixed powx = (x2*x) >> q_val;          //x^3

    result -= (powx * 10923) >> 16 ;     //1/3!



    powx = (powx * x2) >> q_val;            //x^5

    result += (powx * 17) >> 11;          //1/5!



    powx = (powx * x2) >> q_val;            //x^5

    result -= (powx * 13) >>16;          //1/7!



    powx = (powx * x2) >> q_val;           //x^5

    result += (powx * 23) >> 23;         //1/9!

    PERF_END (PERFORMANCE_COUNTER_0_BASE, 1);

    return result;

}



fixed fixed_sin(fixed x, int terms) {

    num_fixed++;

    PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 1);

    fixed result = x;

    fixed x2 = FIXED_MULT(x,x);

    fixed num = x;

    int den = 1;

    int neg = 1;

    fixed term;

    for (int i = 1; i < terms; i++) {

        num = FIXED_MULT(num, x2);

        den *= (2*i+1)*(2*i);

        term = num / den; //fixed / int can just use direct integer divide. No need to shift at all.

        if (!neg)

            result += term;

        else

            result -= term;

        neg = !neg;

    }

    PERF_END (PERFORMANCE_COUNTER_0_BASE, 1);

    return result;

}



#define PI 3.14159265f

#define SAMPLES 20

void test_sin_float(int terms) {

    float dx = 2*PI/SAMPLES;

    float x = -PI;

    float err = 0;

    for (int i = 0; i < SAMPLES; i++) {

        x += dx;

        float result;

        if (terms >= 0)

            result = float_sin(x, terms);

        else

            result = optimized_float_sin(x);

        float math_res = sin(x);

        err += float_abs(result - math_res);

        //printf("sin(%f) = %f\n", x, result);

    }

    err /= SAMPLES;

    printf("SIN_FLOAT (N=%d, Terms=%d) Mean Error: %f\n", SAMPLES, terms, err);

}



float test_sin_fixed(int terms) {

    float dx = 2*PI/SAMPLES;

    float x = -PI;

    float err = 0;

    for (int i = 0; i < SAMPLES; i++) {

        x += dx;

        float result;

        if (terms >= 0)

            result = FIXED_TO_FLOAT(fixed_sin(FLOAT_TO_FIXED(x), terms));

        else

            result = FIXED_TO_FLOAT(optimized_fixed_sin(FLOAT_TO_FIXED(x)));

        float math_res = sin(x);

        err += float_abs(result - math_res);

        //printf("sin(%f) = %f\n", x, result);

    }

    err /= SAMPLES;

    return err;

}



/*Returns best M value*/

int tune_QM_sin(int terms) {

    float best_err = 1000000; //very large initial number

    int bestM = 0;

    for (int M = 1; M <= 31; M++) {

        int N = 31-M;

        SET_Q_FORMAT(M, N);

        float err = test_sin_fixed(terms);

        if (err < best_err) {

            best_err = err;

            bestM = M;

            printf("New Best (Q,M)=(%d,%d): Error = %f\n", M, N, best_err);

        }

    }

    return bestM;

}



#define NUM_ITEMS 100



int main(void){



	volatile int a = 234;

	volatile int result;



	pre_measurement();



	for (int i=0; i<NUM_ITEMS; i++){

		PERF_BEGIN (PERFORMANCE_COUNTER_0_BASE, 1);

		result = a^a;

		PERF_END (PERFORMANCE_COUNTER_0_BASE, 1);

	}



	post_measurement();



	int overhead_cycles = get_runtime(1)/NUM_ITEMS;



	printf("Mean Overhead Per PERF: %f\n", (float)overhead_cycles);



	/*Inserting my code*/



    SET_Q_FORMAT(15, 14);

    //fixed_div_test(12, 24);

    //fixed_div_test(12, 2.5);

    //test_sin_float(5);

    //test_sin_fixed(20);

    int M = tune_QM_sin(5);

    SET_Q_FORMAT(M, 31-M); //this is what we use from now on



    for (int terms = 1; terms < 7; terms++) {

        pre_measurement();

        num_float = 0;

        num_fixed = 0;

        test_sin_float(terms);

        printf("SIN_FIXED (Terms=%d, Samples=%d, M=%d, N=%d) Mean Error: %f\n", terms, SAMPLES, M, 31-M, test_sin_fixed(terms));

        post_measurement();

        printf("Mean Fixed Sin Cycles (terms=%d): %d\n", terms, get_runtime(1)/num_fixed - overhead_cycles);

        printf("Mean Float Sin Cycles (terms=%d): %d\n\n", terms, get_runtime(2)/num_float - overhead_cycles);

    }



    /*For the optimized stuff*/

    pre_measurement();

    printf("Optimized Sine Test\n");

    test_sin_float(-1); //-1 is flag for optimized test

    printf("SIN_FIXED (Optimized, Samples=%d, M=%d, N=%d) Mean Error: %f\n", SAMPLES, M, 31-M, test_sin_fixed(-1));

    printf("Mean Fixed Sin Cycles (optimized): %d\n", get_runtime(1)/num_fixed - overhead_cycles);

    printf("Mean Float Sin Cycles (optimized): %d\n\n", get_runtime(2)/num_float - overhead_cycles);

    post_measurement();







	while(1);

}

